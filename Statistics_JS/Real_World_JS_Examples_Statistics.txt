Task:
Given an array, arr, of n integers, calculate the respective first quartile (Q1), second quartile (Q2), and third quartile (Q3). 
It is guaranteed that Q1, Q2, and Q3 are integers.
Example:
arr = [9,5,7,1,3]
The sorted array is [1,3,5,7,9] which has an odd number of elements. The lower half consists of [1,3], and its median is (1 + 3) / 2 = 2. 
The middle element is 5 and represents the second quartile. The upper half is [7,9] and its median is (7 + 9) / 2 = 8. Return [2,5,8].
arr = [1,3,5,7]
The array is already sorted. The lower half is [1,3] with a median = 2. The median of the entire array is (3 + 5) / 2 = 4, and of the upper half is (5 + 7) / 2 = 6. 
Return [2,4,6].
Function Description:
Complete the quartiles function in the editor below.
quartiles has the following parameters:
-int arr[n]: the values to segregate
Returns:
-int[3]: the medians of the left half of arr, arr in total, and the right half of arr.
Input Format:
The first line contains an integer, n, the number of elements in arr.
The second line contains n space-separated integers, each an arr[i].
Constraints:
5 <= n <= 50
0 < arr[i] <= 100, where arr[i] is the i-th element of the array.

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'quartiles' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function quartiles(arr) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const data = readLine().replace(/\s+$/g, '').split(' ').map(dataTemp => parseInt(dataTemp, 10));

    const res = quartiles(data);

    ws.write(res.join('\n') + '\n');

    ws.end();
}


Task:
Given an array, arr, of n integers, calculate and print the standard deviation. 
Your answer should be in decimal form, rounded to a scale of 1 decimal place (i.e., 12.3 format). 
An error margin of +-0.1 will be tolerated for the standard deviation.
Example:
arr = [2,5,2,7,4]
The sum of the array values is 20 and there are 5 elements. The mean is 4.0.
Subtract the mean from each element, square each result, and take their sum.
(2 - 4)^2 = 4
(5 - 4)^2 = 1
(2 - 4)^2 = 4
(7 - 4)^2 = 9
(4 - 4)^2 = 0
Their sum is 18. Take the square root of 18 / 5 to get 1.7, the standard deviation.
Function Description:
Complete the stdDev function in the editor below.
stdDev has the following parameters:
- int arr[n]: an array of integers
Prints:
- float: the standard deviation to 1 place after the decimal
Input Format:
The first line contains an integer, n, denoting the size of arr.
The second line contains n space-separated integers that describe arr.
Constraints:
5 <= n <= 100
0 < arr[i] <= 10^5

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'stdDev' function below.
 *
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function stdDev(arr) {
    // Print your answers to 1 decimal place within this function

}

function main() {
    const n = parseInt(readLine().trim(), 10);

    const vals = readLine().replace(/\s+$/g, '').split(' ').map(valsTemp => parseInt(valsTemp, 10));

    stdDev(vals);
}


Task:
The interquartile range of an array is the difference between its first (Q1) and third (Q3) quartiles (i.e., Q3 - Q1).

Given an array, values, of n integers and an array, freqs, representing the respective frequencies of values's elements, 
construct a data set, S, where each values[i] occurs at frequency freqs[i]. Then calculate and print S's interquartile range, 
rounded to a scale of 1 decimal place (i.e., 12.3 format).
Tip: Be careful to not use integer division when averaging the middle two elements for a data set with an even number of elements, 
and be sure to not include the median in your upper and lower data sets.
Example:
values = [1,2,3]
freqs = [3,2,1]
Apply the frequencies to the values to get the expanded array . Here . The median of the left half, , the middle element. 
For the right half, . Print the difference to one decimal place: , so print .
Function Description:
Complete the interQuartile function in the editor below.
interQuartile has the following parameters:
- int values[n]: an array of integers
- int freqs[n]:  occurs  times in the array to analyze
Prints:
float: the interquartile range to 1 place after the decimal
Input Format:
The first line contains an integer, , the number of elements in arrays  and .
The second line contains  space-separated integers describing the elements of array .
The third line contains  space-separated integers describing the elements of array .
Constraints:

The number of elements in  is equal to .









































