Task:
Given an array, arr, of n integers, calculate the respective first quartile (Q1), second quartile (Q2), and third quartile (Q3). 
It is guaranteed that Q1, Q2, and Q3 are integers.
Example:
arr = [9,5,7,1,3]
The sorted array is [1,3,5,7,9] which has an odd number of elements. The lower half consists of [1,3], and its median is (1 + 3) / 2 = 2. 
The middle element is 5 and represents the second quartile. The upper half is [7,9] and its median is (7 + 9) / 2 = 8. Return [2,5,8].
arr = [1,3,5,7]
The array is already sorted. The lower half is [1,3] with a median = 2. The median of the entire array is (3 + 5) / 2 = 4, and of the upper half is (5 + 7) / 2 = 6. 
Return [2,4,6].
Function Description:
Complete the quartiles function in the editor below.
quartiles has the following parameters:
-int arr[n]: the values to segregate
Returns:
-int[3]: the medians of the left half of arr, arr in total, and the right half of arr.
Input Format:
The first line contains an integer, n, the number of elements in arr.
The second line contains n space-separated integers, each an arr[i].
Constraints:
5 <= n <= 50
0 < arr[i] <= 100, where arr[i] is the i-th element of the array.

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'quartiles' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function quartiles(arr) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const data = readLine().replace(/\s+$/g, '').split(' ').map(dataTemp => parseInt(dataTemp, 10));

    const res = quartiles(data);

    ws.write(res.join('\n') + '\n');

    ws.end();
}


Task:
Given an array, arr, of n integers, calculate and print the standard deviation. 
Your answer should be in decimal form, rounded to a scale of 1 decimal place (i.e., 12.3 format). 
An error margin of +-0.1 will be tolerated for the standard deviation.
Example:
arr = [2,5,2,7,4]
The sum of the array values is 20 and there are 5 elements. The mean is 4.0.
Subtract the mean from each element, square each result, and take their sum.
(2 - 4)^2 = 4
(5 - 4)^2 = 1
(2 - 4)^2 = 4
(7 - 4)^2 = 9
(4 - 4)^2 = 0
Their sum is 18. Take the square root of 18 / 5 to get 1.7, the standard deviation.
Function Description:
Complete the stdDev function in the editor below.
stdDev has the following parameters:
- int arr[n]: an array of integers
Prints:
- float: the standard deviation to 1 place after the decimal
Input Format:
The first line contains an integer, n, denoting the size of arr.
The second line contains n space-separated integers that describe arr.
Constraints:
5 <= n <= 100
0 < arr[i] <= 10^5

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'stdDev' function below.
 *
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function stdDev(arr) {
    // Print your answers to 1 decimal place within this function

}

function main() {
    const n = parseInt(readLine().trim(), 10);

    const vals = readLine().replace(/\s+$/g, '').split(' ').map(valsTemp => parseInt(valsTemp, 10));

    stdDev(vals);
}


Task:
The interquartile range of an array is the difference between its first (Q1) and third (Q3) quartiles (i.e., Q3 - Q1).
Given an array, values, of n integers and an array, freqs, representing the respective frequencies of values's elements, 
construct a data set, S, where each values[i] occurs at frequency freqs[i]. Then calculate and print S's interquartile range, 
rounded to a scale of 1 decimal place (i.e., 12.3 format).
Tip: Be careful to not use integer division when averaging the middle two elements for a data set with an even number of elements, 
and be sure to not include the median in your upper and lower data sets.
Example:
values = [1,2,3]
freqs = [3,2,1]
Apply the frequencies to the values to get the expanded array S = [1,1,1,2,2,3]. Here left = [1,1,1], right = [2,2,3]. 
The median of the left half, Q1 = 1.0, the middle element. 
For the right half, Q3 = 2.0. Print the difference to one decimal place: Q3 - Q1 = 2.0 - 1.0 = 1, so print 1.0.
Function Description:
Complete the interQuartile function in the editor below.
interQuartile has the following parameters:
- int values[n]: an array of integers
- int freqs[n]: values[i] occurs freqs[i] times in the array to analyze
Prints:
float: the interquartile range to 1 place after the decimal
Input Format:
The first line contains an integer, n, the number of elements in arrays values and freqs.
The second line contains n space-separated integers describing the elements of array values.
The third line contains n space-separated integers describing the elements of array freqs.
Constraints:
5 <= n <= 50
0 < values[i] <= 100
0 < SUM(from n -1 to i = 0) of freqs[i] <= 10^3
The number of elements in S is equal to SUM of freqs.

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'interQuartile' function below.
 *
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY values
 *  2. INTEGER_ARRAY freqs
 */

function interQuartile(values, freqs) {
    // Print your answer to 1 decimal place within this function

}

function main() {
    const n = parseInt(readLine().trim(), 10);

    const val = readLine().replace(/\s+$/g, '').split(' ').map(valTemp => parseInt(valTemp, 10));

    const freq = readLine().replace(/\s+$/g, '').split(' ').map(freqTemp => parseInt(freqTemp, 10));

    interQuartile(val, freq);
}



Task:
Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. 
Then print the respective minimum and maximum values as a single line of two space-separated long integers.
Example:
arr = [1,3,5,7,9]
The minimum sum is 1 + 3 + 5 + 7 = 16 and the maximum sum is 3 + 5 + 7 + 9 = 24. The function prints
16 24
Function Description:
Complete the miniMaxSum function in the editor below.
miniMaxSum has the following parameter(s):
arr: an array of 5 integers
Print:
Print two space-separated integers on one line: the minimum sum and the maximum sum of 4 of 5 elements.
Input Format:
A single line of five space-separated integers.
Constraints:
1 <= arr[i] <= 10^9

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'miniMaxSum' function below.
 *
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function miniMaxSum(arr) {
    // Write your code here

}

function main() {

    const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

    miniMaxSum(arr);
}


Task:
Given a time in 12-hour AM/PM format, convert it to military (24-hour) time.
Note: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.
- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.
Example:
s = 12:01:00PM
Return '12:01:00'.
s = 12:01:00AM
Return '00:01:00'.
Function Description:
Complete the timeConversion function in the editor below. It should return a new string representing the input time in 24 hour format.
timeConversion has the following parameter(s):
string s: a time in 12 hour format
Returns:
string: the time in 24 hour format
Input Format:
A single string s that represents a time in 12-hour clock format (i.e.: hh:mm:ssAM or hh:mm:ssPM).
Constraints:
All input times are valid


Task:
There is a collection of input strings and a collection of query strings. 
For each query string, determine how many times it occurs in the list of input strings. Return an array of the results.
Example:
strings = ['ab',' ab','abc']
queries = ['ab', 'abc', 'bc']
There are 2 instances of 'ab', 1 of 'abc' and 0 of 'bc'. For each query, add an element to the return array, results = [2, 1, 0].
Function Description:
Complete the function matchingStrings in the editor below. The function must return an array of integers representing the 
frequency of occurrence of each query string in strings.
matchingStrings has the following parameters:
string strings[n] - an array of strings to search
string queries[q] - an array of query strings
Returns:
int[q]: an array of results for each query
Input Format:
The first line contains an integer n, the size of strings[].
Each of the next n lines contains a string strings[i].
The next line contains q, the size of queries[].
Each of the next q lines contains a string queries[i].
Constraints:
1 <= n <= 1000
1 <= q <= 1000
1 <= |strings[i]|, |queries[i]| <= 20

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'matchingStrings' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. STRING_ARRAY strings
 *  2. STRING_ARRAY queries
 */

function matchingStrings(strings, queries) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const stringsCount = parseInt(readLine().trim(), 10);

    let strings = [];

    for (let i = 0; i < stringsCount; i++) {
        const stringsItem = readLine();
        strings.push(stringsItem);
    }

    const queriesCount = parseInt(readLine().trim(), 10);

    let queries = [];

    for (let i = 0; i < queriesCount; i++) {
        const queriesItem = readLine();
        queries.push(queriesItem);
    }

    const res = matchingStrings(strings, queries);

    ws.write(res.join('\n') + '\n');

    ws.end();
}



Objective:
In this challenge, we learn about Arrays. Check out the attached tutorial for more details.
Function Description:
Complete the getSecondLargest function in the editor below.
getSecondLargest has the following parameters:
int nums[n]: an array of integers
Returns:
int: the second largest number in nums
Input Format:
The first line contains an integer, n, the size of the nums array.
The second line contains n space-separated numbers that describe the elements in nums.
Constraints:
1 <= n <= 10
0 <= nums[i] <= 100, where nums[i] is the number at index i.
The numbers in nums may not be distinct. 

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   Return the second largest number in the array.
*   @param {Number[]} nums - An array of numbers.
*   @return {Number} The second largest number in the array.
**/
function getSecondLargest(nums) {
    // Complete the function
}


function main() {
    const n = +(readLine());
    const nums = readLine().split(' ').map(Number);
    
    console.log(getSecondLargest(nums));
}


Objective:
In this challenge, we learn about switch statements. Check out the attached tutorial for more details.
Task:
Complete the getLetter(s) function in the editor. It has one parameter: a string, s, consisting of lowercase 
English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria:
If the first character in string s is in the set {a,e,i,o,u}, then return A.
If the first character in string s is in the set {b,c,d,f,g}, then return B.
If the first character in string s is in the set {h,j,k,l,m}, then return C.
If the first character in string s is in the set {n,p,q,r,s,t,v,w,x,y,z}, then return D.
Hint: You can get the letter at some index i in s using the syntax s[i] or s.charAt(i).
Function Description:
Complete the getLetter function in the editor below.
getLetter has the following parameters:
string s: a string
Returns:
string: a single letter determined as described above
Input Format:
Stub code in the editor reads a single string denoting s from stdin.
Constraints:
1 <= |s| <= 100, where |s| is the length of s.
String s contains lowercase English alphabetic letters (i.e., a through z) only.

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function getLetter(s) {
    let letter;
    // Write your code here
    
    return letter;
}


function main() {
    const s = readLine();
    
    console.log(getLetter(s));
}


Task:
Complete the function in the editor. It has one parameter: an array, a, of objects. Each object in the array has two integer properties denoted by x and y. 
The function must return a count of all such objects o in array a that satisfy o.x == o.y.
Input Format:
The first line contains an integer denoting n.
Each of the n subsequent lines contains two space-separated integers describing the values of x and y.
Constraints:
5 <= n <= 10
1 <= x,y <= 100
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Return a count of the total number of objects 'o' satisfying o.x == o.y.
 * 
 * Parameter(s):
 * objects: an array of objects with integer properties 'x' and 'y'
 */
function getCount(objects) {
    
}


function main() {
    const n = +(readLine());
    let objects = [];
    
    for (let i = 0; i < n; i++) {
        const [a, b] = readLine().split(' ');
        
        objects.push({x: +(a), y: +(b)});
    }
    
    console.log(getCount(objects));
}


Objective:
In this challenge, we practice using JavaScript classes. Check the attached tutorial for more details.
Task:
Create a Polygon class that has the following properties:
A constructor that takes an array of integer values describing the lengths of the polygon's sides.
A perimeter() method that returns the polygon's perimeter.
Locked code in the editor tests the Polygon constructor and the perimeter method.
Note: The perimeter method must be lowercase and spelled correctly.
Input Format:
There is no input for this challenge.

/*
 * Implement a Polygon class with the following properties:
 * 1. A constructor that takes an array of integer side lengths.
 * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.
 */


const rectangle = new Polygon([10, 20, 10, 20]);
const square = new Polygon([10, 10, 10, 10]);
const pentagon = new Polygon([10, 20, 30, 40, 43]);

console.log(rectangle.perimeter());
console.log(square.perimeter());
console.log(pentagon.perimeter());


Objective:
In this challenge, we practice using JavaScript Template Literals. Check the attached tutorial for more details.
Task:
The code in the editor has a tagged template literal that passes the area and perimeter of a rectangle to a tag function named sides. 
Recall that the first argument of a tag function is an array of string literals from the template, and the subsequent values are the template's 
respective expression values.
Complete the function in the editor so that it does the following:
1) Finds the initial values of s1 and s2 by plugging the area and perimeter values into the formula:
s = (P+-sqrt(P^2 - 16.A)) / 4
where A is the rectangle's area and P is its perimeter.
Creates an array consisting of s1 and s2 and sorts it in ascending order.
Returns the sorted array.
Input Format:
The first line contains an integer denoting s1.
The second line contains an integer denoting s2.
Constraints:
1 <= s1, s2 <= 100

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Determine the original side lengths and return an array:
 * - The first element is the length of the shorter side
 * - The second element is the length of the longer side
 * 
 * Parameter(s):
 * literals: The tagged template literal's array of strings.
 * expressions: The tagged template literal's array of expression values (i.e., [area, perimeter]).
 */
function sides(literals, ...expressions) {
    
}


function main() {
    let s1 = +(readLine());
    let s2 = +(readLine());
    
    [s1, s2] = [s1, s2].sort();
    
    const [x, y] = sides`The area is: ${s1 * s2}.\nThe perimeter is: ${2 * (s1 + s2)}.`;
    
    console.log((s1 === x) ? s1 : -1);
    console.log((s2 === y) ? s2 : -1);
}


You will be given a list of 32 bit unsigned integers. Flip all the bits (1 --> 0 and 0 --> 1) and return the result as an unsigned integer.
Example:
n = 9[10]
9[10] = 1001[2]. We're working with 32 bits, so:
00000000000000000000000000001001[2] = 9[10]
11111111111111111111111111110110[2] = 4294967286[10]
Return 4294967286.
Function Description:
Complete the flippingBits function in the editor below.
flippingBits has the following parameter(s):
int n: an integer
Returns:
int: the unsigned decimal integer result
Input Format:
The first line of the input contains q, the number of queries.
Each of the next q lines contain an integer, n, to process.
Constraints:
1 <= q <= 100
0 <= n < 2^32

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'flippingBits' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts LONG_INTEGER n as parameter.
 */

function flippingBits(n) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const q = parseInt(readLine().trim(), 10);

    for (let qItr = 0; qItr < q; qItr++) {
        const n = parseInt(readLine().trim(), 10);

        const result = flippingBits(n);

        ws.write(result + '\n');
    }

    ws.end();
}


Given a square matrix, calculate the absolute difference between the sums of its diagonals.
For example, the square matrix arr is shown below:
1 2 3
4 5 6
9 8 9  
The left-to-right diagonal = 1 + 5 + 9 = 15. The right to left diagonal = 3 + 5 + 9 = 17. Their absolute difference is |15 - 17| = 2.
Function description:
Complete the diagonalDifference function in the editor below.
diagonalDifference takes the following parameter:
int arr[n][m]: an array of integers
Return:
int: the absolute diagonal difference
Input Format:
The first line contains a single integer, n, the number of rows and columns in the square matrix arr.
Each of the next n lines describes a row, arr[i], and consists of n space-separated integers arr[i][j].
Constraints:
-100 <= arr[i][j] <= 100

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'diagonalDifference' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts 2D_INTEGER_ARRAY arr as parameter.
 */

function diagonalDifference(arr) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    let arr = Array(n);

    for (let i = 0; i < n; i++) {
        arr[i] = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));
    }

    const result = diagonalDifference(arr);

    ws.write(result + '\n');

    ws.end();
}


Comparison Sorting:
Quicksort usually has a running time of n x log(n), but is there an algorithm that can sort even faster? 
In general, this is not possible. Most sorting algorithms are comparison sorts, i.e. they sort a list just by comparing the elements to one another. 
A comparison sort algorithm cannot beat n x log(n) (worst-case) running time, since n x log(n) represents the minimum number 
of comparisons needed to know where to place each element. For more details, you can see these notes (PDF).
Alternative Sorting:
Another sorting method, the counting sort, does not require comparison. Instead, you create an integer array whose index range covers 
the entire range of values in your array to sort. Each time a value occurs in the original array, you increment the counter at that index. 
At the end, run through your counting array, printing the value of each non-zero valued index that number of times.
Example:
arr = [1,1,3,2,1]
All of the values are in the range [0...3], so create an array of zeros, result = [0,0,0,0]. The results of each iteration follow:
i	arr[i]	result
0	1	[0, 1, 0, 0]
1	1	[0, 2, 0, 0]
2	3	[0, 2, 0, 1]
3	2	[0, 2, 1, 1]
4	1	[0, 3, 1, 1]
The frequency array is [0,3,1,1]. These values can be used to create the sorted array as well: sorted = [1,1,1,2,3].
Note:
For this exercise, always return a frequency array with 100 elements. The example above shows only the first 4 elements, the remainder being zeros.
Challenge:
Given a list of integers, count and return the number of times each value appears as an array of integers.
Function Description:
Complete the countingSort function in the editor below.
countingSort has the following parameter(s):
arr[n]: an array of integers
Returns:
int[100]: a frequency array
Input Format:
The first line contains an integer n, the number of items in arr.
Each of the next n lines contains an integer arr[i] where 0 <= i < n.
Constraints:
100 <= n <= 10^6
0 <= arr[i] < 100

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'countingSort' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function countingSort(arr) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

    const result = countingSort(arr);

    ws.write(result.join(' ') + '\n');

    ws.end();
}


A pangram is a string that contains every letter of the alphabet. Given a sentence determine whether it is a pangram in the English alphabet. 
Ignore case. Return either pangram or not pangram as appropriate.
Example:
s = 'The quick brown fox jumps over the lazy dog'
The string contains all letters in the English alphabet, so return pangram.
Function Description:
Complete the function pangrams in the editor below. It should return the string pangram if the input string is a pangram. 
Otherwise, it should return not pangram.
pangrams has the following parameter(s):
string s: a string to test
Returns:
string: either pangram or not pangram
Input Format:
A single line with string s.
Constraints:
0 < length of s <= 10^3
Each character of s, s[i] belongs to {a - z, A - z, space}

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'pangrams' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */

function pangrams(s) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const s = readLine();

    const result = pangrams(s);

    ws.write(result + '\n');

    ws.end();
}


There are two n-element arrays of integers, A and B. Permute them into some A' and B' such that the relation A'[i] B'[i] >= k holds for all i where 0 <= i < n.
There will be q queries consisting of A, B, and k. For each query, return YES if some permutation A', B' satisfying the relation exists. 
Otherwise, return NO.
Example:
A = [0,1]
B = [0,2]
k = 1
A valid A', B' is A' = [1,0] and B' = [0,2]: 1 + 0  >= 1 and 0 + 2 >= 1. Return YES.
Function Description:
Complete the twoArrays function in the editor below. It should return a string, either YES or NO.
twoArrays has the following parameter(s):
int k: an integer
int A[n]: an array of integers
int B[n]: an array of integers
Returns:
- string: either YES or NO
Input Format:
The first line contains an integer q, the number of queries.
The next q sets of 3 lines are as follows:
The first line contains two space-separated integers n and k, the size of both arrays A and B, and the relation variable.
The second line contains n space-separated integers A[i].
The third line contains n space-separated integers B[i].
Constraints:
1 <= q <= 10
1 <= n <= 1000
1 <= k <= 10^9
0 <= A[i], B[i] <= 10^9

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'twoArrays' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts following parameters:
 *  1. INTEGER k
 *  2. INTEGER_ARRAY A
 *  3. INTEGER_ARRAY B
 */

function twoArrays(k, A, B) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const q = parseInt(readLine().trim(), 10);

    for (let qItr = 0; qItr < q; qItr++) {
        const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

        const n = parseInt(firstMultipleInput[0], 10);

        const k = parseInt(firstMultipleInput[1], 10);

        const A = readLine().replace(/\s+$/g, '').split(' ').map(ATemp => parseInt(ATemp, 10));

        const B = readLine().replace(/\s+$/g, '').split(' ').map(BTemp => parseInt(BTemp, 10));

        const result = twoArrays(k, A, B);

        ws.write(result + '\n');
    }

    ws.end();
}

















































