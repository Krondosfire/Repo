Objective:
In this challenge, we learn about binomial distributions. 
Task:
The ratio of boys to girls for babies born in Russia is 1.09 : 1. If there is 1 child born per birth, what proportion of 
Russian families with exactly 6 children will have at least 3 boys?
Write a program to compute the answer using the above parameters. Then print your result, rounded to a scale of 3 decimal places (i.e., 1.234 format).
Input Format:
A single line containing the following values:
1.09 1

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});

Task:
The probability that a machine produces a defective product is 1/3. What is the probability that the 1st defect occurs the 5th item produced?
Input Format:
The first line contains the respective space-separated numerator and denominator for the probability of a defect, 
and the second line contains the inspection we want the probability of being the first defect for:
1 3
5

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});

Task:
A manufacturer of metal pistons finds that, on average, 12% of the pistons they manufacture are rejected because they are incorrectly sized. 
What is the probability that a batch of 10 pistons will contain:
No more than 2 rejects?
At least 2 rejects?
Input Format:
A single line containing the following values (denoting the respective percentage of defective pistons and the size of the current batch of pistons):
12 10

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
The probability that a machine produces a defective product is 1/3. What is the probability that the  defect is found during the first 5 inspections?
Input Format:
The first line contains the respective space-separated numerator and denominator for the probability of a defect, 
and the second line contains the inspection we want the probability of the first defect being discovered by:
1 3
5

function processData(input) {
    //Enter your code here
    
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
A random variable, X, follows Poisson distribution with mean of 2.5. Find the probability with which the random variable X is equal to 5.
Input Format:
The first line contains X's mean. The second line contains the value we want the probability for:
2.5
5

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});



Task:
The manager of a industrial plant is planning to buy a machine of either type A or type B. For each dayâ€™s operation:

The number of repairs, X, that machine A needs is a Poisson random variable with mean 0.88. The daily cost of operating A is C(A) = 160 + 40X^2.
The number of repairs, Y, that machine B needs is a Poisson random variable with mean 1.55. The daily cost of operating B is C(B) = 128 + 40Y^2.
Assume that the repairs take a negligible amount of time and the machines are maintained nightly to ensure that they operate like new at the 
start of each day. Find and print the expected daily cost for each machine.
Input Format:
A single line comprised of 2 space-separated values denoting the respective means for A and B:
0.88 1.55

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});



Task:
In a certain plant, the time taken to assemble a car is a random variable, X, having a normal distribution with a mean of 20 hours 
and a standard deviation of 2 hours. What is the probability that a car can be assembled at this plant in:
1. Less than 19.5 hours?
2. Between 20 and 22 hours?
Input Format:
There are 3 lines of input (shown below):
20 2
19.5
20 22
The first line contains 2 space-separated values denoting the respective mean and standard deviation for X. 
The second line contains the number associated with question 1. 
The third line contains 2 space-separated values describing the respective lower and upper range boundaries for question 2.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
The final grades for a Physics exam taken by a large group of students have a mean of mu = 70 and a standard deviation of sigma = 10. 
If we can approximate the distribution of these grades by a normal distribution, what percentage of the students:
1. Scored higher than 80 (i.e., have a grade > 80)?
2. Passed the test (i.e., have a grade >= 60)?
3. Failed the test (i.e., have a grade < 60)?
Find and print the answer to each question on a new line, rounded to a scale of 2 decimal places.
Input Format:
There are 3 lines of input (shown below):

70 10
80
60
The first line contains 2 space-separated values denoting the respective mean and standard deviation for the exam. 
The second line contains the number associated with question 1. 
The third line contains the pass/fail threshold number associated with questions 2 and 3.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});



Task:
A large elevator can transport a maximum of 9800 pounds. Suppose a load of cargo containing 49 boxes must be transported via the elevator. 
The box weight of this type of cargo follows a distribution with a mean of mu = 205 pounds and a standard deviation of sigma = 15 pounds. 
Based on this information, what is the probability that all 49 boxes can be safely loaded into the freight elevator and transported?
Input Format:
There are 4 lines of input (shown below):
9800
49
205
15
The first line contains the maximum weight the elevator can transport. 
The second line contains the number of boxes in the cargo. 
The third line contains the mean weight of a cargo box, and the fourth line contains its standard deviation.


function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
The number of tickets purchased by each student for the University X vs. University Y football game follows a distribution that has a mean of mu = 24 
and a standard deviation of sigma = 2.0.
A few hours before the game starts, 100 eager students line up to purchase last-minute tickets. 
If there are only 250 tickets left, what is the probability that all 100 students will be able to purchase tickets?
Input Format:
There are 4 lines of input (shown below):
250
100
2.4
2.0
The first line contains the number of last-minute tickets available at the box office. 
The second line contains the number of students waiting to buy tickets. 
The third line contains the mean number of purchased tickets, and the fourth line contains the standard deviation.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Objective:
In this challenge, we practice solving problems based on the Central Limit Theorem. 
Task:
You have a sample of 100 values from a population with mean mu = 500 and with standard deviation sigma = 80. 
Compute the interval that covers the middle 95% of the distribution of the sample mean; in other words, compute A and B such that P(A < x < B) = 0.95. 
Use the value of z = 1.96. Note that z is the z-score.
Input Format:
There are five lines of input (shown below):
100
500
80
.95
1.96
The first line contains the sample size. The second and third lines contain the respective mean (mu) and standard deviation (sigma). 
The fourth line contains the distribution percentage we want to cover (as a decimal), and the fifth line contains the value of z.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Objective:
In this challenge, we practice calculating the Pearson correlation coefficient. 
Task:
Given two n-element data sets, X and Y, calculate the value of the Pearson correlation coefficient.
Input Format:
The first line contains an integer, n, denoting the size of data sets X and Y.
The second line contains n space-separated real numbers (scaled to at most one decimal place), defining data set X.
The third line contains n space-separated real numbers (scaled to at most one decimal place), defining data set Y.
Constraints:
10 <= n <= 100
1 <= x[i] <= 500, where x[i] is the i-th value of data set X.
1 <= y[i] <= 500, where y[i] is the i-th value of data set Y.
Data set X contains unique values.
Data set Y contains unique values.


function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});




Objective:
In this challenge, we practice calculating Spearman's rank correlation coefficient. 
Task:
Given two n-element data sets, X and Y, calculate the value of Spearman's rank correlation coefficient.
Input Format:
The first line contains an integer, n, denoting the number of values in data sets X and Y.
The second line contains n space-separated real numbers (scaled to at most one decimal place) denoting data set X.
The third line contains n space-separated real numbers (scaled to at most one decimal place) denoting data set Y.
Constraints:
10 <= n <= 100
1 <= x[i] <= 500, where x[i] is the i-th value of data set X.
1 <= y[i] <= 500, where y[i] is the i-th value of data set Y.
Data set X contains unique values.
Data set Y contains unique values.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.
Lily decides to share a contiguous segment of the bar selected such that:
* The length of the segment matches Ron's birth month, and,
* The sum of the integers on the squares is equal to his birth day.
Determine how many ways she can divide the chocolate.
Example:
s = [2,2,1,3,2]
d = 4
m = 2
Lily wants to find segments summing to Ron's birth day, d = 4 with a length equalling his birth month, m = 2. 
In this case, there are two segments meeting her criteria: [2,2] and [1,3].
Function Description:
Complete the birthday function in the editor below.
birthday has the following parameter(s):
* int s[n]: the numbers on each of the squares of chocolate
* int d: Ron's birth day
* int m: Ron's birth month
Returns:
int: the number of ways the bar can be divided
Input Format:
The first line contains an integer n, the number of squares in the chocolate bar.
The second line contains n space-separated integers s[i], the numbers on the chocolate squares where 0 <= i < n.
The third line contains two space-separated integers, d and m, Ron's birth day and his birth month.
Constraints:
1 <= n <= 100
1 <= s[i] <= 5, where (0 <= i < n)
1 <= d <= 31
1 <= m <= 12


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'birthday' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY s
 *  2. INTEGER d
 *  3. INTEGER m
 */

function birthday(s, d, m) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const s = readLine().replace(/\s+$/g, '').split(' ').map(sTemp => parseInt(sTemp, 10));

    const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

    const d = parseInt(firstMultipleInput[0], 10);

    const m = parseInt(firstMultipleInput[1], 10);

    const result = birthday(s, d, m);

    ws.write(result + '\n');

    ws.end();
}


Task:
Given two strings consisting of digits 0 and 1 only, find the XOR of the two strings.
Debug the given function strings_xor to find the XOR of the two given strings appropriately.
Note: You can modify at most three lines in the given code and you cannot add or remove lines to the code.
To restore the original code, click on the icon to the right of the language selector.
Input Format:
The input consists of two lines. The first line of the input contains the first string, s, and the second line contains the second string, t.
Constraints:
1 <= |s| <= 10^4
|s| = |t|

process.stdin.resume();
process.stdin.setEncoding("ascii");
var input = "";
process.stdin.on("data", function (chunk) {
    input += chunk;
});
process.stdin.on("end", function () {
    // now we can read/parse input
});




The median of a list of numbers is essentially its middle element after sorting. The same number of elements
occur after it as before. Given a list of numbers with an odd number of elements, find the median.
Example:
arr = [5,3,1,2,4]
The sorted array arr' = [1,2,3,4,5]. The middle elements and the median is 3.
Function description:
Complete the findMedian function in the editor below.
findMedian has the following parameters:
int arr[n]: an unsorted array of integers
Returns:
int:the median of the array
Input format:
The first line contains the integer n, the size of arr.
The second line contains n space-separated integers arr[i].
Constraints:
1 <= n <= 1000001
n is odd
-10000 <= arr[i] <= 10000

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



/*
 * Complete the 'findMedian' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

function findMedian(arr) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

    const result = findMedian(arr);

    ws.write(result + '\n');

    ws.end();
}





Sean invented a game involving a 2n x 2n matrix where each cell of the matrix contains an integer. 
He can reverse any of its rows or columns any number of times. The goal of the game is to maximize the sum of the elements in the n x n submatrix located in the
upper-left quadrant of the matrix.
Given the initial configurations for q matrices, help Sean reverse the
rows and columns of each matrix in the best possible way so that the sum of the elements in the matrix's upper-left quadrant is maximal.
Example:
matrix = [[1,2], [3,4]]
1 2
3 4
It is 2 x 2 and we want to maximize the top left quadrant, a 1 x 1 matrix. Reverse row 1:
1 2
4 3
And now reverse column 0:
4 2
1 3
The maximal sum is 4.
Function description:
Complete the flippingMatrix function.
flippingMatrix has the followinf parameters:
* int matrix[2n][2n]: a 2-dimensional array of integers
Returns:
* int: the maximum sum possible
Input format:
The first line contains an integer q, the number of queries.
The next q sets of lines are in the following format:
* The first line of each query contains an integer, n.
* Each of the next 2n lines contains 2n space-separated integers matrix[i][j] in row i of the matrix.
Constraints:
1 <= q <= 16
1 <= n <=128
0 <= matrix[i][j] <= 4096, where 0 <= i, j < 2n.

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



/*
 * Complete the 'flippingMatrix' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts 2D_INTEGER_ARRAY matrix as parameter.
 */

function flippingMatrix(matrix) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const q = parseInt(readLine().trim(), 10);

    for (let qItr = 0; qItr < q; qItr++) {
        const n = parseInt(readLine().trim(), 10);

        let matrix = Array(2 * n);

        for (let i = 0; i < 2 * n; i++) {
            matrix[i] = readLine().replace(/\s+$/g, '').split(' ').map(matrixTemp => parseInt(matrixTemp, 10));
        }

        const result = flippingMatrix(matrix);

        ws.write(result + '\n');
    }

    ws.end();
}


Objective:
Yesterday's challenge taught you to manage exceptional situations by using try and catch blocks. 
In today's challenge, you will practice throwing and propagating an exception. 
Task:
Write a Calculator class with a single method: int power(int,int). The power method takes two integers, n and p, as parameters and 
returns the integer result of n^p. If either n or p is negative, then the method must throw an exception with the message: n and p should be non-negative.
Note: Do not use an access modifier (e.g.: public) in the declaration for your Calculator class.
Input Format:
Input from stdin is handled for you by the locked stub code in your editor. The first line contains an integer, T, 
the number of test cases. Each of the T subsequent lines describes a test case in 2 space-separated integers that denote n and p, respectively.
Constraints:
No Test Case will result in overflow for correctly written code.

process.stdin.setEncoding('ascii');

var input_stdin = "";
var input_stdin_array = "";
var input_currentline = 0;

process.stdin.on('data', function (data) {
    input_stdin += data;
});

process.stdin.on('end', function () {
    input_stdin_array = input_stdin.split("\n");
    main();    
});
function readLine() {
    return input_stdin_array[input_currentline++];
}

//Write your code here

function main(){
    var myCalculator=new Calculator();
    var T=parseInt(readLine());
    while(T-->0){
        var num = (readLine().split(" "));
        try{
            var n=parseInt(num[0]);
            var p=parseInt(num[1]);
            var ans=myCalculator.power(n,p);
            console.log(ans);
        }
        catch(e){
            console.log(e);
        }

    }
}


Exception
Objective:
Today, we're getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. 
Task:
Read a string, S, and print its integer value; if S cannot be converted to an integer, print Bad String.
Note: You must use the String-to-Integer and exception handling constructs built into your submission language. 
If you attempt to use loops/conditional statements, you will get a 0 score.
Input Format:
A single string, S.
Constraints:
1 <= |S| <= 6, where |S| is the length of string S.
S is composed of either lowercase letters (a-z) or decimal digits (0-9).

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



function main() {
    const S = readLine();
}


Objective:
Today, we are building on our knowledge of arrays by adding another dimension. 
Context:
Given a 6 x 6 2D Array, A:
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
We define an hourglass in A to be a subset of values with indices falling in this pattern in A's graphical representation:
a b c
  d
e f g
There are 16 hourglasses in A, and an hourglass sum is the sum of an hourglass' values.
Task:
Calculate the hourglass sum for every hourglass in A, then print the maximum hourglass sum.
Example:
In the array shown above, the maximum hourglass sum is 7 for the hourglass in the top left corner.
Input Format:
There are 6 lines of input, where each line contains 6 space-separated integers that describe the 2D Array A.
Constraints:
-9 <= A[i][j] <= 9
0 <= i,j <=5

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



function main() {

    let arr = Array(6);

    for (let i = 0; i < 6; i++) {
        arr[i] = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));
    }
}


Inheritance
Task:
You are given two classes, Person and Student, where Person is the base class and Student is the derived class. 
Completed code for Person and a declaration for Student are provided for you in the editor. 
Observe that Student inherits all the properties of Person.
Complete the Student class by writing the following:
A Student class constructor, which has 4 parameters:
* A string, firstName.
* A string, lastName.
* An integer, idNumber.
* An integer array (or vector) of test scores, scores.
A char calculate() method that calculates a Student object's average and returns the grade character representative of their calculated average:
Input Format:
The locked stub code in the editor reads the input and calls the Student class constructor with the necessary arguments. 
It also calls the calculate method which takes no arguments.
The first line contains firstName, lastName, and idNumber, separated by a space. The second line contains the number of test scores. 
The third line of space-separated integers describes scores.
Constraints:
1 <= length of firstName, length of lastName <= 10
length of idNumber === 7
0 <= score <= 100

'use strict';

var _input = '';
var _index = 0;
process.stdin.on('data', (data) => { _input += data; });
process.stdin.on('end', () => {
    _input = _input.split(new RegExp('[ \n]+'));
    main();    
});
function read() { return _input[_index++]; }

/**** Ignore above this line. ****/

class Person {
    constructor(firstName, lastName, identification) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.idNumber = identification;
    }
    
    printPerson() {
        console.log(
            "Name: " + this.lastName + ", " + this.firstName 
            + "\nID: " + this.idNumber
        )
    }
}

class Student extends Person {
    /*	
    *   Class Constructor
    *   
    *   @param firstName - A string denoting the Person's first name.
    *   @param lastName - A string denoting the Person's last name.
    *   @param id - An integer denoting the Person's ID number.
    *   @param scores - An array of integers denoting the Person's test scores.
    */
    // Write your constructor here

    /*	
    *   Method Name: calculate
    *   @return A character denoting the grade.
    */
    // Write your method here
    
}

function main() {
    let firstName = read()
    let lastName = read()
    let id = +read()
    let numScores = +read()
    let testScores = new Array(numScores)
    
    for (var i = 0; i < numScores; i++) {
        testScores[i] = +read()  
    }

    let s = new Student(firstName, lastName, id, testScores)
    s.printPerson()
    s.calculate()
    console.log('Grade: ' + s.calculate())
}

Stacks and Queues:
Task:
A palindrome is a word, phrase, number, or other sequence of characters which reads the same backwards and forwards. 
Can you determine if a given string, s, is a palindrome?
To solve this challenge, we must first take each character in s, enqueue it in a queue, and also push that same character onto a stack. 
Once that's done, we must dequeue the first character from the queue and pop the top character off the stack, then compare the two characters 
to see if they are the same; as long as the characters match, we continue dequeueing, popping, and comparing each character until our 
containers are empty (a non-match means s isn't a palindrome).
Write the following declarations and implementations:
1. Two instance variables: one for your stack, and one for your queue.
2. A void pushCharacter(char ch) method that pushes a character onto a stack.
3. A void enqueueCharacter(char ch) method that enqueues a character in the queue instance variable.
4. A char popCharacter() method that pops and returns the character at the top of the stack instance variable.
5. A char dequeueCharacter() method that dequeues and returns the first character in the queue instance variable.
Input Format:
You do not need to read anything from stdin. The locked stub code in your editor reads a single line containing string s. 
It then calls the methods specified above to pass each character to your instance variables.
Constraints:
s is composed of lowercase English letters.

process.stdin.resume();
process.stdin.setEncoding('ascii');

var input_stdin = "";
var input_stdin_array = "";
var input_currentline = 0;

process.stdin.on('data', function (data) {
    input_stdin += data;
});

process.stdin.on('end', function () {
    input_stdin_array = input_stdin.split("\n");
    main();    
});
function readLine() {
    return input_stdin_array[input_currentline++];
}

function Solution(){
  //Write your code here
}

function main(){
    // read the string s
    var s=readLine();
    var len=s.length;
    // create the Solution class object p
    var obj=new Solution();
    //push/enqueue all the characters of string s to stack
    for(var i=0;i<len;i++){
        obj.pushCharacter(s.charAt(i));
        obj.enqueueCharacter(s.charAt(i));
    }
  
    var isPalindrome=true;
    /*
    pop the top character from stack
    dequeue the first character from queue
    compare both the characters*/

    for(var i=0;i<len/2;i++){
        if(obj.popCharacter()!=obj.dequeueCharacter()){
            isPalindrome=false;
          	break;
        }
    }
    //finally print whether string s is palindrome or not

    if(isPalindrome)
        console.log("The word, "+s+", is a palindrome.");    
    else
        console.log("The word, "+s+", is not a palindrome.");
}



Abstract Classes:
Task:
Given a Book class and a Solution class, write a MyBook class that does the following:

Inherits from Book
Has a parameterized constructor taking these 3 parameters:
1. string title
2. string author
3. int price
Implements the Book class' abstract display() method so it prints these 3 lines:
1. Title:, a space, and then the current instance's title.
2. Author:, a space, and then the current instance's author.
3. Price:, a space, and then the current instance's price.
Note: Because these classes are being written in the same file, you must not use an access modifier (e.g.: public) when declaring 
MyBook or your code will not execute.
Input Format:
You are not responsible for reading any input from stdin. The Solution class creates a Book object and calls the MyBook class constructor 
(passing it the necessary arguments). It then calls the display method on the Book object.

'use strict';

var _input = '';
var _index = 0;
process.stdin.on('data', (data) => { _input += data; });
process.stdin.on('end', () => {
    _input = _input.split(new RegExp('\n'));
    main();    
});
function readLine() { return _input[_index++]; }

/**** Ignore above this line. ****/

class Book {
    constructor(title, author) {
        if (this.constructor === Book) {
            throw new TypeError('Do not attempt to directly instantiate an abstract class.'); 
        }
        else {
            this.title = title;
            this.author = author;
        }
    }
    
    display() {
        console.log('Implement the \'display\' method!')
    }
}

// Declare your class here.
    /**   
    *   Class Constructor
    *   
    *   @param title The book's title.
    *   @param author The book's author.
    *   @param price The book's price.
    **/
    // Write your constructor here
    
    /**   
    *   Method Name: display
    *   
    *   Print the title, author, and price in the specified format.
    **/
    // Write your method here
    
// End class

function main() {
    let title = readLine()
    let author = readLine()
    let price = +readLine()

    let book = new MyBook(title, author, price)
    book.display()
}


Scope:
The absolute difference between two integers, a and b, is written as |a - b|. The maximum absolute difference between two integers in a 
set of positive integers, elements, is the largest absolute difference between any two integers in __elements.
The Difference class is started for you in the editor. It has a private integer array (elements) for storing N non-negative integers, 
and a public integer (maximumDifference) for storing the maximum absolute difference.
Task:
Complete the Difference class by writing the following:
* A class constructor that takes an array of integers as a parameter and saves it to the __elements instance variable.
* A computeDifference method that finds the maximum absolute difference between any 2 numbers in __elements and stores it in the maximumDifference instance variable.
Input Format:
You are not responsible for reading any input from stdin. The locked Solution class in the editor reads in 2 lines of input. 
The first line contains N, the size of the elements array. The second line has N space-separated integers that describe the __elements array.
Constraints:
1 <= N <= 10
1 <= __elements[i] <= 100, where 0 <= i <= N -1

class Difference:
    def __init__(self, a):
        self.__elements = a

	# Add your code here
    def computeDifference(self):
        self.maximumDifference = max(self.__elements) - min(self.__elements)
# End of Difference class

_ = input()
a = [int(e) for e in input().split(' ')]

d = Difference(a)
d.computeDifference()

print(d.maximumDifferen


Linked List
A Node class is provided for you in the editor. A Node object has an integer data field, data, and a Node instance pointer, next, 
pointing to another node (i.e.: the next node in the list).
A Node insert function is also declared in your editor. It has two parameters: a pointer, head, pointing to the first node of a linked list, 
and an integer, data, that must be added to the end of the list as a new Node object.
Task:
Complete the insert function in your editor so that it creates a new Node (pass data as the Node constructor argument) 
and inserts it at the tail of the linked list referenced by the head parameter. Once the new node is added, return the reference to the head node.
Note: The head argument is null for an empty list.
Input Format:
The first line contains T, the number of elements to insert.
Each of the next T lines contains an integer to insert at the end of the list.


process.stdin.resume();
process.stdin.setEncoding('ascii');

var input_stdin = "";
var input_stdin_array = "";
var input_currentline = 0;

process.stdin.on('data', function (data) {
    input_stdin += data;
});

process.stdin.on('end', function () {
    input_stdin_array = input_stdin.split("\n");
    main();    
});
function readLine() {
    return input_stdin_array[input_currentline++];
}
function Node(data){
    this.data=data;
    this.next=null;
}
function Solution(){

	this.insert=function(head,data){
          //complete this method
    };

	this.display=function(head){
        var start=head;
            while(start){
                process.stdout.write(start.data+" ");
                start=start.next;
            }
    };
}
function main(){
    var T=parseInt(readLine());
    var head=null;
    var mylist=new Solution();
    for(i=0;i<T;i++){
        var data=parseInt(readLine());
        head=mylist.insert(head,data);
    }
    mylist.display(head);
}		







































