Objective:
In this challenge, we learn about binomial distributions. 
Task:
The ratio of boys to girls for babies born in Russia is 1.09 : 1. If there is 1 child born per birth, what proportion of 
Russian families with exactly 6 children will have at least 3 boys?
Write a program to compute the answer using the above parameters. Then print your result, rounded to a scale of 3 decimal places (i.e., 1.234 format).
Input Format:
A single line containing the following values:
1.09 1

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});

Task:
The probability that a machine produces a defective product is 1/3. What is the probability that the 1st defect occurs the 5th item produced?
Input Format:
The first line contains the respective space-separated numerator and denominator for the probability of a defect, 
and the second line contains the inspection we want the probability of being the first defect for:
1 3
5

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});

Task:
A manufacturer of metal pistons finds that, on average, 12% of the pistons they manufacture are rejected because they are incorrectly sized. 
What is the probability that a batch of 10 pistons will contain:
No more than 2 rejects?
At least 2 rejects?
Input Format:
A single line containing the following values (denoting the respective percentage of defective pistons and the size of the current batch of pistons):
12 10

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
The probability that a machine produces a defective product is 1/3. What is the probability that the  defect is found during the first 5 inspections?
Input Format:
The first line contains the respective space-separated numerator and denominator for the probability of a defect, 
and the second line contains the inspection we want the probability of the first defect being discovered by:
1 3
5

function processData(input) {
    //Enter your code here
    
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
A random variable, X, follows Poisson distribution with mean of 2.5. Find the probability with which the random variable X is equal to 5.
Input Format:
The first line contains X's mean. The second line contains the value we want the probability for:
2.5
5

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});



Task:
The manager of a industrial plant is planning to buy a machine of either type A or type B. For each dayâ€™s operation:

The number of repairs, X, that machine A needs is a Poisson random variable with mean 0.88. The daily cost of operating A is C(A) = 160 + 40X^2.
The number of repairs, Y, that machine B needs is a Poisson random variable with mean 1.55. The daily cost of operating B is C(B) = 128 + 40Y^2.
Assume that the repairs take a negligible amount of time and the machines are maintained nightly to ensure that they operate like new at the 
start of each day. Find and print the expected daily cost for each machine.
Input Format:
A single line comprised of 2 space-separated values denoting the respective means for A and B:
0.88 1.55

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});



Task:
In a certain plant, the time taken to assemble a car is a random variable, X, having a normal distribution with a mean of 20 hours 
and a standard deviation of 2 hours. What is the probability that a car can be assembled at this plant in:
1. Less than 19.5 hours?
2. Between 20 and 22 hours?
Input Format:
There are 3 lines of input (shown below):
20 2
19.5
20 22
The first line contains 2 space-separated values denoting the respective mean and standard deviation for X. 
The second line contains the number associated with question 1. 
The third line contains 2 space-separated values describing the respective lower and upper range boundaries for question 2.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
The final grades for a Physics exam taken by a large group of students have a mean of mu = 70 and a standard deviation of sigma = 10. 
If we can approximate the distribution of these grades by a normal distribution, what percentage of the students:
1. Scored higher than 80 (i.e., have a grade > 80)?
2. Passed the test (i.e., have a grade >= 60)?
3. Failed the test (i.e., have a grade < 60)?
Find and print the answer to each question on a new line, rounded to a scale of 2 decimal places.
Input Format:
There are 3 lines of input (shown below):

70 10
80
60
The first line contains 2 space-separated values denoting the respective mean and standard deviation for the exam. 
The second line contains the number associated with question 1. 
The third line contains the pass/fail threshold number associated with questions 2 and 3.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});



Task:
A large elevator can transport a maximum of 9800 pounds. Suppose a load of cargo containing 49 boxes must be transported via the elevator. 
The box weight of this type of cargo follows a distribution with a mean of mu = 205 pounds and a standard deviation of sigma = 15 pounds. 
Based on this information, what is the probability that all 49 boxes can be safely loaded into the freight elevator and transported?
Input Format:
There are 4 lines of input (shown below):
9800
49
205
15
The first line contains the maximum weight the elevator can transport. 
The second line contains the number of boxes in the cargo. 
The third line contains the mean weight of a cargo box, and the fourth line contains its standard deviation.


function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
The number of tickets purchased by each student for the University X vs. University Y football game follows a distribution that has a mean of mu = 24 
and a standard deviation of sigma = 2.0.
A few hours before the game starts, 100 eager students line up to purchase last-minute tickets. 
If there are only 250 tickets left, what is the probability that all 100 students will be able to purchase tickets?
Input Format:
There are 4 lines of input (shown below):
250
100
2.4
2.0
The first line contains the number of last-minute tickets available at the box office. 
The second line contains the number of students waiting to buy tickets. 
The third line contains the mean number of purchased tickets, and the fourth line contains the standard deviation.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Objective:
In this challenge, we practice solving problems based on the Central Limit Theorem. 
Task:
You have a sample of 100 values from a population with mean mu = 500 and with standard deviation sigma = 80. 
Compute the interval that covers the middle 95% of the distribution of the sample mean; in other words, compute A and B such that P(A < x < B) = 0.95. 
Use the value of z = 1.96. Note that z is the z-score.
Input Format:
There are five lines of input (shown below):
100
500
80
.95
1.96
The first line contains the sample size. The second and third lines contain the respective mean (mu) and standard deviation (sigma). 
The fourth line contains the distribution percentage we want to cover (as a decimal), and the fifth line contains the value of z.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Objective:
In this challenge, we practice calculating the Pearson correlation coefficient. 
Task:
Given two n-element data sets, X and Y, calculate the value of the Pearson correlation coefficient.
Input Format:
The first line contains an integer, n, denoting the size of data sets X and Y.
The second line contains n space-separated real numbers (scaled to at most one decimal place), defining data set X.
The third line contains n space-separated real numbers (scaled to at most one decimal place), defining data set Y.
Constraints:
10 <= n <= 100
1 <= x[i] <= 500, where x[i] is the i-th value of data set X.
1 <= y[i] <= 500, where y[i] is the i-th value of data set Y.
Data set X contains unique values.
Data set Y contains unique values.


function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});




Objective:
In this challenge, we practice calculating Spearman's rank correlation coefficient. 
Task:
Given two n-element data sets, X and Y, calculate the value of Spearman's rank correlation coefficient.
Input Format:
The first line contains an integer, n, denoting the number of values in data sets X and Y.
The second line contains n space-separated real numbers (scaled to at most one decimal place) denoting data set X.
The third line contains n space-separated real numbers (scaled to at most one decimal place) denoting data set Y.
Constraints:
10 <= n <= 100
1 <= x[i] <= 500, where x[i] is the i-th value of data set X.
1 <= y[i] <= 500, where y[i] is the i-th value of data set Y.
Data set X contains unique values.
Data set Y contains unique values.

function processData(input) {
    //Enter your code here
} 

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


Task:
Two children, Lily and Ron, want to share a chocolate bar. Each of the squares has an integer on it.
Lily decides to share a contiguous segment of the bar selected such that:
* The length of the segment matches Ron's birth month, and,
* The sum of the integers on the squares is equal to his birth day.
Determine how many ways she can divide the chocolate.
Example:
s = [2,2,1,3,2]
d = 4
m = 2
Lily wants to find segments summing to Ron's birth day, d = 4 with a length equalling his birth month, m = 2. 
In this case, there are two segments meeting her criteria: [2,2] and [1,3].
Function Description:
Complete the birthday function in the editor below.
birthday has the following parameter(s):
* int s[n]: the numbers on each of the squares of chocolate
* int d: Ron's birth day
* int m: Ron's birth month
Returns:
int: the number of ways the bar can be divided
Input Format:
The first line contains an integer n, the number of squares in the chocolate bar.
The second line contains n space-separated integers s[i], the numbers on the chocolate squares where 0 <= i < n.
The third line contains two space-separated integers, d and m, Ron's birth day and his birth month.
Constraints:
1 <= n <= 100
1 <= s[i] <= 5, where (0 <= i < n)
1 <= d <= 31
1 <= m <= 12


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'birthday' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY s
 *  2. INTEGER d
 *  3. INTEGER m
 */

function birthday(s, d, m) {
    // Write your code here

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const s = readLine().replace(/\s+$/g, '').split(' ').map(sTemp => parseInt(sTemp, 10));

    const firstMultipleInput = readLine().replace(/\s+$/g, '').split(' ');

    const d = parseInt(firstMultipleInput[0], 10);

    const m = parseInt(firstMultipleInput[1], 10);

    const result = birthday(s, d, m);

    ws.write(result + '\n');

    ws.end();
}


Task:
Given two strings consisting of digits 0 and 1 only, find the XOR of the two strings.
Debug the given function strings_xor to find the XOR of the two given strings appropriately.
Note: You can modify at most three lines in the given code and you cannot add or remove lines to the code.
To restore the original code, click on the icon to the right of the language selector.
Input Format:
The input consists of two lines. The first line of the input contains the first string, s, and the second line contains the second string, t.
Constraints:
1 <= |s| <= 10^4
|s| = |t|

process.stdin.resume();
process.stdin.setEncoding("ascii");
var input = "";
process.stdin.on("data", function (chunk) {
    input += chunk;
});
process.stdin.on("end", function () {
    // now we can read/parse input
});





