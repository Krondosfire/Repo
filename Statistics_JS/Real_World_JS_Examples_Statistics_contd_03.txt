Climbing the Leaderboard
An arcade game player wants to climb to the top of the leaderboard and track their ranking. 
The game uses Dense Ranking, so its leaderboard works like this:
* The player with the highest score is ranked number 1 on the leaderboard.
* Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.
Example:
ranked = [100,90,90,80]
player = [70,80,105]
The ranked players will have ranks 1, 2, 2, and 3, respectively. If the player's scores are 70, 80 and 105, 
their rankings after each game are 4th, 3rd and 1st. Return [4,3,1].
Function Description:
Complete the climbingLeaderboard function in the editor below.
climbingLeaderboard has the following parameter(s):
* int ranked[n]: the leaderboard scores
* int player[m]: the player's scores
Returns:
* int[m]: the player's rank after each new score
Input Format:
The first line contains an integer n, the number of players on the leaderboard.
The next line contains n space-separated integers ranked[i], the leaderboard scores in decreasing order.
The next line contains an integer, m, the number games the player plays.
The last line contains m space-separated integers player[j], the game scores.
Constraints:
1 <= n <= 2x10^5
1 <= m <= 2x10^5
0 <= ranked[i] <= 10^9 for 0 <= i < n
0 <= player[j] <= 10^9 for 0 <= j < m
The existing leaderboard, ranked, is in descending order.
The player's scores, player, are in ascending order.
Subtask:
For 60% of the maximum score:
1 <= n <= 200
1 <= m <= 200

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'climbingLeaderboard' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY ranked
 *  2. INTEGER_ARRAY player
 */

function climbingLeaderboard(ranked, player) {
    // Write your code here
	// Remove duplicates from ranked to get unique scores in descending order
    const uniqueRanked = [];
    for (let i = 0; i < ranked.length; i++) {
        if (i === 0 || ranked[i] !== ranked[i - 1]) {
            uniqueRanked.push(ranked[i]);
        }
    }

    const result = [];
    let i = uniqueRanked.length - 1;
    for (const score of player) {
        // Move up the leaderboard as long as player score >= ranked score
        while (i >= 0 && score >= uniqueRanked[i]) {
            i--;
        }
        // Rank is index + 2 (since index is 0-based and we want next rank after last checked)
        result.push(i + 2);
    }
    return result;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const rankedCount = parseInt(readLine().trim(), 10);

    const ranked = readLine().replace(/\s+$/g, '').split(' ').map(rankedTemp => parseInt(rankedTemp, 10));

    const playerCount = parseInt(readLine().trim(), 10);

    const player = readLine().replace(/\s+$/g, '').split(' ').map(playerTemp => parseInt(playerTemp, 10));

    const result = climbingLeaderboard(ranked, player);

    ws.write(result.join('\n') + '\n');

    ws.end();
}
------------------------------------------------------------------------------

Reverse a linked list
Given the pointer to the head node of a linked list, change the next pointers of the nodes so that their order is reversed. 
The head pointer given may be null meaning that the initial list is empty.
Example:
head references the list 1 --> 2 --> 3 --> NULL
Manipulate the next pointers of each node in place and return head, now referencing the head of the list 3 --> 2 --> 1 --> NULL.
Function Description:
Complete the reverse function in the editor below.
reverse has the following parameter:
* SinglyLinkedListNode pointer head: a reference to the head of a list
Returns:
* SinglyLinkedListNode pointer: a reference to the head of the reversed list
Input Format:
The first line contains an integer t, the number of test cases.
Each test case has the following format:
The first line contains an integer n, the number of elements in the linked list.
Each of the next n lines contains an integer, the data values of the elements in the linked list.
Constraints:
1 <= t <= 10
1 <= n <= 1000
1 <= list[i] <= 1000, where list[i] is the i-th element in the list.


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

const SinglyLinkedListNode = class {
    constructor(nodeData) {
        this.data = nodeData;
        this.next = null;
    }
};

const SinglyLinkedList = class {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    insertNode(nodeData) {
        const node = new SinglyLinkedListNode(nodeData);

        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }

        this.tail = node;
    }
};

function printSinglyLinkedList(node, sep, ws) {
    while (node != null) {
        ws.write(String(node.data));

        node = node.next;

        if (node != null) {
            ws.write(sep);
        }
    }
}

/*
 * Complete the 'reverse' function below.
 *
 * The function is expected to return an INTEGER_SINGLY_LINKED_LIST.
 * The function accepts INTEGER_SINGLY_LINKED_LIST llist as parameter.
 */

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode next;
 * }
 *
 */

function reverse(llist) {
    // Write your code here
	let prev = null;
	let current = llist;
	while(current !== null) {
		let nextNode = current.next;
		current.next = prev;
		prev = current;
		current = nextNode;
	}
	return prev;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const tests = parseInt(readLine(), 10);

    for (let testsItr = 0; testsItr < tests; testsItr++) {
        const llistCount = parseInt(readLine(), 10);

        let llist = new SinglyLinkedList();

        for (let i = 0; i < llistCount; i++) {
            const llistItem = parseInt(readLine(), 10);
            llist.insertNode(llistItem);
        }

        let llist1 = reverse(llist.head);

        printSinglyLinkedList(llist1, " ", ws)
        ws.write("\n");
    }

    ws.end();
}
-----------------------------------------------------------------

Reverse a doubly linked list
Given the pointer to the head node of a doubly linked list, reverse the order of the nodes in place. 
That is, change the next and prev pointers of the nodes so that the direction of the list is reversed. 
Return a reference to the head node of the reversed list.
Note: The head node might be NULL to indicate that the list is empty.
Function Description:
Complete the reverse function in the editor below.
reverse has the following parameter(s):
* DoublyLinkedListNode head: a reference to the head of a DoublyLinkedList
Returns:
* DoublyLinkedListNode: a reference to the head of the reversed list
Input Format:
The first line contains an integer t, the number of test cases.
Each test case is of the following format:
The first line contains an integer n, the number of elements in the linked list.
The next n lines contain an integer each denoting an element of the linked list.
Constraints:
1 <= t <= 10
0 <= n <= 1000
0 <= DoublyLinkedListNode.data <= 1000

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

const DoublyLinkedListNode = class {
    constructor(nodeData) {
        this.data = nodeData;
        this.next = null;
        this.prev = null;
    }
};

const DoublyLinkedList = class {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    insertNode(nodeData) {
        let node = new DoublyLinkedListNode(nodeData);

        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
            node.prev = this.tail;
        }

        this.tail = node;
    }
};

function printDoublyLinkedList(node, sep, ws) {
    while (node != null) {
        ws.write(String(node.data));

        node = node.next;

        if (node != null) {
            ws.write(sep);
        }
    }
}

/*
 * Complete the 'reverse' function below.
 *
 * The function is expected to return an INTEGER_DOUBLY_LINKED_LIST.
 * The function accepts INTEGER_DOUBLY_LINKED_LIST llist as parameter.
 */

/*
 * For your reference:
 *
 * DoublyLinkedListNode {
 *     int data;
 *     DoublyLinkedListNode next;
 *     DoublyLinkedListNode prev;
 * }
 *
 */

function reverse(llist) {
    // Write your code here
	let current = llist;
	let temp = null;
	let newHead = null;
	while(current !== null) {
		// Swap next and prev for current node
		temp = current.prev;
		current.prev = current.next;
		current.next = temp;
		// Move to the next node in the original list(which is prev now)
		newHead = current;
		current = current.prev;
	}
	return newHead;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const t = parseInt(readLine(), 10);

    for (let tItr = 0; tItr < t; tItr++) {
        const llistCount = parseInt(readLine(), 10);

        let llist = new DoublyLinkedList();

        for (let i = 0; i < llistCount; i++) {
            const llistItem = parseInt(readLine(), 10);
            llist.insertNode(llistItem);
        }

        let llist1 = reverse(llist.head);

        printDoublyLinkedList(llist1, " ", ws)
        ws.write("\n");
    }

    ws.end();
}
--------------------------------------------------------------------------

Insert a node at a specific position in a linked list
Given the pointer to the head node of a linked list and an integer to insert at a certain position, create a new node 
with the given integer as its data attribute, insert this node at the desired position and return the head node.
A position of 0 indicates head, a position of 1 indicates one node away from the head and so on. 
The head pointer given may be null meaning that the initial list is empty.
Example:
head refers to the first node in the list 1 --> 2 --> 3
data = 4
position = 2
Insert a node at position 2 with data = 4. The new list is 1 --> 2 --> 4 --> 3
Function Description: 
Complete the function insertNodeAtPosition in the editor below. It must return a reference to the head node of your finished list.
insertNodeAtPosition has the following parameters:
* head: a SinglyLinkedListNode pointer to the head of the list
* data: an integer value to insert as data in your new node
* position: an integer position to insert the new node, zero based indexing
Returns:
* SinglyLinkedListNode pointer: a reference to the head of the revised list
Input Format:
The first line contains an integer n, the number of elements in the linked list.
Each of the next n lines contains an integer SinglyLinkedListNode[i].data.
The next line contains an integer data, the data of the node that is to be inserted.
The last line contains an integer position.
Constraints:
1 <= n <= 1000
1 <= SinglyLinkedListNode[i].data <= 1000, where SinglyLinkedListNode[i] is the i-th element of the linked list
0 <= position <= n

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

const SinglyLinkedListNode = class {
    constructor(nodeData) {
        this.data = nodeData;
        this.next = null;
    }
};

const SinglyLinkedList = class {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    insertNode(nodeData) {
        const node = new SinglyLinkedListNode(nodeData);

        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }

        this.tail = node;
    }
};

function printSinglyLinkedList(node, sep, ws) {
    while (node != null) {
        ws.write(String(node.data));

        node = node.next;

        if (node != null) {
            ws.write(sep);
        }
    }
}

/*
 * Complete the 'insertNodeAtPosition' function below.
 *
 * The function is expected to return an INTEGER_SINGLY_LINKED_LIST.
 * The function accepts following parameters:
 *  1. INTEGER_SINGLY_LINKED_LIST llist
 *  2. INTEGER data
 *  3. INTEGER position
 */

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode next;
 * }
 *
 */

function insertNodeAtPosition(llist, data, position) {
    // Write your code here
	const newNode = new SinglyLinkedListNode(data);
	// Inserting at the head (position 0)
	if(position === 0) {
		newNode.next = llist;
		return newNode;
	}
	let current = llist;
	let currentPosition = 0;
	// Traverse to the node just before the insertion point
	while(current !== null && currentPosition < position - 1) {
		current = current.next;
		currentPosition++;
	}
	// Insert the new node
	newNode.next = current.next;
	current.next = newNode;
	return llist;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const llistCount = parseInt(readLine(), 10);

    let llist = new SinglyLinkedList();

    for (let i = 0; i < llistCount; i++) {
        const llistItem = parseInt(readLine(), 10);
        llist.insertNode(llistItem);
    }

    const data = parseInt(readLine(), 10);

    const position = parseInt(readLine(), 10);

    let llist_head = insertNodeAtPosition(llist.head, data, position);

    printSinglyLinkedList(llist_head, " ", ws)
    ws.write("\n");

    ws.end();
}
-----------------------------------------------------------------------------------------

Merge two sorted linked lists
Given pointers to the heads of two sorted linked lists, merge them into a single, sorted linked list. 
Either head pointer may be null meaning that the corresponding list is empty.
Example:
headA refers to 1 --> 3 --> 7 --> NULL
headB refers to 1 --> 2 --> NULL
The new list is 1 --> 1 --> 2 --> 3 --> 7 --> NULL
Function Description:
Complete the mergeLists function in the editor below.
mergeLists has the following parameters:
* SinglyLinkedListNode pointer headA: a reference to the head of a list
* SinglyLinkedListNode pointer headB: a reference to the head of a list
Returns:
* SinglyLinkedListNode pointer: a reference to the head of the merged list
Input Format:
The first line contains an integer t, the number of test cases.
The format for each test case is as follows:
The first line contains an integer n, the length of the first linked list.
The next n lines contain an integer each, the elements of the linked list.
The next line contains an integer m, the length of the second linked list.
The next m lines contain an integer each, the elements of the second linked list.
Constraints:
1 <= t <= 10
1 <= n,m <= 1000
1 <= list[i] <= 1000, where list[i] is the i-th element of the list


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

const SinglyLinkedListNode = class {
    constructor(nodeData) {
        this.data = nodeData;
        this.next = null;
    }
};

const SinglyLinkedList = class {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    insertNode(nodeData) {
        const node = new SinglyLinkedListNode(nodeData);

        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }

        this.tail = node;
    }
};

function printSinglyLinkedList(node, sep, ws) {
    while (node != null) {
        ws.write(String(node.data));

        node = node.next;

        if (node != null) {
            ws.write(sep);
        }
    }
}

// Complete the mergeLists function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode next;
 * }
 *
 */
function mergeLists(head1, head2) {
	// Create a dummy node to simplify edge cases
	let dummy = new SinglyLinkedListNode(0);
	let tail = dummy;
	let a  = head1;
	let b = head2;
	while(a !== null && b !== null) {
		if(a.data <= b.data) {
			tail.next =  a;
			a = a.next;
		} else {
			tail.next = b;
			b = b.next;
		}
		tail = tail.next;
	}
	// Attach the remaining nodes, if any
	if(a !== null) {
		tail.next = a;
	} else if(b !== null) {
		tail.next = b;
	}
	// Return the merged list, skipping the dummy node
	return dummy.next;

}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const tests = parseInt(readLine(), 10);

    for (let testsItr = 0; testsItr < tests; testsItr++) {
        const llist1Count = parseInt(readLine(), 10);

        let llist1 = new SinglyLinkedList();

        for (let i = 0; i < llist1Count; i++) {
            const llist1Item = parseInt(readLine(), 10);
            llist1.insertNode(llist1Item);
        }
      
      	const llist2Count = parseInt(readLine(), 10);

        let llist2 = new SinglyLinkedList();

        for (let i = 0; i < llist2Count; i++) {
            const llist2Item = parseInt(readLine(), 10);
            llist2.insertNode(llist2Item);
        }

        let llist3 = mergeLists(llist1.head, llist2.head);

        printSinglyLinkedList(llist3, " ", ws)
        ws.write("\n");
    }

    ws.end();
}
----------------------------------------------------------------------------------

Ice Cream Parlor
Two friends like to pool their money and go to the ice cream parlor. T
hey always choose two distinct flavors and they spend all of their money.
Given a list of prices for the flavors of ice cream, select the two that will cost all of the money they have.
Example: m = 6 cost=[1,3,4,5,6] 
The two flavors that cost 1 and 5 meet the criteria. Using 1-based indexing, they are at indices 1 and 4.
Function Description:
Complete the icecreamParlor function in the editor below.
icecreamParlor has the following parameter(s):
* int m: the amount of money they have to spend
* int cost[n]: the cost of each flavor of ice cream
Returns:
* int[2]: the indices of the prices of the two flavors they buy, sorted ascending
Input Format:
The first line contains an integer, t, the number of trips to the ice cream parlor. The next t sets of lines each describe a visit.
Each trip is described as follows:
1. The integer m, the amount of money they have pooled.
2. The integer n, the number of flavors offered at the time.
3. n space-separated integers denoting the cost of each flavor: cost[cost[1],cost[2],...,cost[n]].
Note: The index within the cost array represents the flavor of the ice cream purchased.
Constraints:
1 <= t <= 50
2 <= m <= 10^4
2 <= n <= 10^4
1 <= cost[i] <= 10^4, for each i that belongs to [1,n]
There will always be a unique solution.

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the 'icecreamParlor' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER m
 *  2. INTEGER_ARRAY arr
 */

function icecreamParlor(m, arr) {
    // Write your code here
	const flavorMap = new Map();
	for(let i = 0; i < arr.length; i++) {
		const complement = m - arr[i];
		if(flavorMap.has(complement)) {
			return[flavorMap.get(complement), i + 1].sort((a, b) => a - b);
		}
		flavorMap.set(arr[i], i + 1);
	}
	return [];
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const t = parseInt(readLine().trim(), 10);

    for (let tItr = 0; tItr < t; tItr++) {
        const m = parseInt(readLine().trim(), 10);

        const n = parseInt(readLine().trim(), 10);

        const arr = readLine().replace(/\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));

        const result = icecreamParlor(m, arr);

        ws.write(result.join(' ') + '\n');
    }

    ws.end();
}
---------------------------------------------------------------------------------








































































